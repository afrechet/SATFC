buildscript {
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.12.0'
    }
}

dependencies {
    compile project(':satfc')
    testCompile 'junit:junit:4.12'

}

apply plugin: 'maven-publish'

//Project properties.
applicationName = 'FCCSimulator'
mainClassName = 'ca.ubc.cs.beta.fcc.simulator.MultiBandAuctioneer'
version = "$SATFCVersion-" + getGitName()
applicationDefaultJvmArgs = ['-Xmx16g', '-Djava.library.path=${CPLEX_DIR}']

startScripts{
    doLast{
        def bashFile = new File(getOutputDir(),applicationName)
        def replace = bashFile.text.replace("-Djava.library.path=\\", "-Djava.library.path=")
        bashFile.setText(replace)
    }
}


jar {
    baseName = applicationName
}

// Creates scripts for entry points
// Subproject must apply application plugin to be able to call this method.
def createScript(project, mainClass, name, jvmArgs) {
    project.tasks.create(name: name, type: CreateStartScripts) {
        outputDir = new File(project.buildDir, 'scripts')
        mainClassName = mainClass
        applicationName = name
        classpath = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
        defaultJvmOpts = jvmArgs
    }
    project.tasks[name].dependsOn(project.jar)
    project.applicationDistribution.with {
        into("bin") {
            from(project.tasks[name])
            fileMode = 0755
        }
    }
    // This is a dumb hack to get rid of the backslash that inevitably appears before the dollar sign...
    project.tasks[name].doLast {
        def f = new File(project.buildDir, "scripts/${name}")
        def replace = f.text.replace("-Djava.library.path=\\", "-Djava.library.path=")
        f.setText(replace)
    }
}

//Publishing to EARG maven repo.
public String getEARGMavenRepo() {
    Properties properties = new Properties()
    def propertyFilename = 'local.properties'
    def propertyFile = project.rootProject.file(propertyFilename)
    if (!propertyFile.exists()) {
        println 'Necessary file ' + propertyFilename + ' was not present, creating an empty version of it!'
        propertyFile.createNewFile()
    }
    properties.load(propertyFile.newDataInputStream())
    def eargMavenRepo = properties.getProperty('earg.mavenrepo.dir')
    return eargMavenRepo
}

publishing {

    repositories {
        //Local EARG maven repo.
        maven {
            url getEARGMavenRepo() + '/snapshots/'
        }
    }

    publications {

        maven(MavenPublication) {
            groupId 'ca.ubc.cs.beta'
            artifactId applicationName
            version version

            from components.java

            artifact sourcesJar {
                classifier "sources"
            }
            artifact distZip {
                classifier "dist"
            }
        }

    }
}


createScript(project,
             'ca.ubc.cs.beta.fcc.vcg.VCGMip',
             'VCG',
             ['-Djava.library.path=${CPLEX_DIR}', "-Xmx16g"])